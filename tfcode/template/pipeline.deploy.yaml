parameters:
- name: moduleName
  displayName: "Module Name to deploy"
  type: string
  default: ""
- name: workingDirectory
  displayName: "Working DIrectory"
  type: string
  default: ""
- name: dependsOn
  displayName: "Define job Dependency"
  type: string
  default: ""
- name: condition
  displayName: "Condition to run a job"
  type: string
  default: ""
- name: backendServiceArm
  displayName: "Service connection for backend service"
  type: string
  default: ""
- name: backendAzureRmResourceGroupName
  displayName: "Resource Group for Backend storage account"
  type: string
  default: ""
- name: backendAzureRmStorageAccountName
  displayName: "Backend storage account"
  type: string
  default: ""
- name: backendAzureRmContainerName
  displayName: "Container name to store terraform state file"
  type: string
  default: ""
- name: backendAzureRmKey
  displayName: "State File Name"
  type: string
  default: ""
- name: keyvault
  displayName: "Name of keyvault to pull the secrets and client id to be used for making connection to Azure for backend storage"
  type: string
  default: ""
- name: env
  displayName: "Environment up for deployment"
  type: string
  default: ""
- name: deploymentFolder
  displayName: "Repository to use to trigger the deployment."
  type: string
  default: ""
- name: secrets
  displayName: "secrets to download"
  type: string
  default: "tenantid,subscriptionid,clientsecret,clientid"
- name: mdname
  displayName: "Name of the module"
  type: string

jobs:
  - deployment: 
    displayName: 'Deploy Module ${{ parameters.mdname }}'
    pool:
      name: 'Azure Pipelines'
    dependsOn: '${{ parameters.dependsOn }}'
    condition: '${{ parameters.condition }}'
    environment: deploy
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:  
          - checkout: self
            path: repo

          - task: AzureKeyVault@1
            inputs:
              azureSubscription: '${{ parameters.backendServiceArm }}'
              KeyVaultName: '${{ parameters.keyvault }}'
              SecretsFilter: '${{ parameters.secrets }}'
              runAsPreJob: true
            displayName: 'Get key vault secrets as pipeline variables'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform latest'

          - script: |
              terraform -chdir="${{ parameters.workingDirectory }}" init \
                -reconfigure \
                -backend-config="storage_account_name=${{ parameters.backendAzureRmStorageAccountName }}" \
                -backend-config="container_name=${{ parameters.backendAzureRmContainerName }}" \
                -backend-config="key=${{ parameters.backendAzureRmKey }}" \
                -backend-config="resource_group_name=${{ parameters.backendAzureRmResourceGroupName }}" \
                -backend-config="subscription_id=$(subscriptionid)" \
                -backend-config="tenant_id=$(tenantid)" \
                -backend-config="client_id=$(clientid)" \
                -backend-config="client_secret=$(clientsecret)"
            displayName: Terraform Init

          - script: |
              az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
              export ARM_CLIENT_ID=$(clientid)
              export ARM_CLIENT_SECRET=$(clientsecret)
              export ARM_TENANT_ID=$(tenantid)
              export AZURE_CLIENT_ID=$(clientid)
              export AZURE_CLIENT_SECRET=$(clientsecret)
              export AZURE_TENANT_ID=$(tenantid)
              export ARM_SUBSCRIPTION_ID=$(subscriptionid)
              terraform -chdir="${{ parameters.workingDirectory }}" plan -var-file="$(Agent.BuildDirectory)/${{ parameters.deploymentFolder }}/${{ parameters.moduleName }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan      
            displayName: Terraform Plan

          - script: |
              az login --service-principal -u $(clientid) -p $(clientsecret) --tenant $(tenantid)
              export ARM_CLIENT_ID=$(clientid)
              export ARM_CLIENT_SECRET=$(clientsecret)
              export ARM_TENANT_ID=$(tenantid)
              export AZURE_CLIENT_ID=$(clientid)
              export AZURE_CLIENT_SECRET=$(clientsecret)
              export AZURE_TENANT_ID=$(tenantid)
              export ARM_SUBSCRIPTION_ID=$(subscriptionid)
              terraform -chdir="${{ parameters.workingDirectory }}" apply -auto-approve -var-file="$(Agent.BuildDirectory)/${{ parameters.deploymentFolder }}/${{ parameters.moduleName }}/variables-${{ parameters.env }}.tfvars" -out $(Build.BuildId).plan
            displayName: Terraform Apply